{"id":"node_modules/node-vibrant/lib/image/base.js","dependencies":[{"name":"/Users/christianreindl/Code/fenwick-ui/node_modules/node-vibrant/lib/image/base.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/christianreindl/Code/fenwick-ui/node_modules/node-vibrant/src/image/base.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/christianreindl/Code/fenwick-ui/package.json","includedInParent":true,"mtime":1628361505277},{"name":"/Users/christianreindl/Code/fenwick-ui/node_modules/node-vibrant/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImageBase = void 0;\nvar ImageBase = /** @class */ (function () {\n    function ImageBase() {\n    }\n    ImageBase.prototype.scaleDown = function (opts) {\n        var width = this.getWidth();\n        var height = this.getHeight();\n        var ratio = 1;\n        if (opts.maxDimension > 0) {\n            var maxSide = Math.max(width, height);\n            if (maxSide > opts.maxDimension)\n                ratio = opts.maxDimension / maxSide;\n        }\n        else {\n            ratio = 1 / opts.quality;\n        }\n        if (ratio < 1)\n            this.resize(width * ratio, height * ratio, ratio);\n    };\n    ImageBase.prototype.applyFilter = function (filter) {\n        var imageData = this.getImageData();\n        if (typeof filter === 'function') {\n            var pixels = imageData.data;\n            var n = pixels.length / 4;\n            var offset = void 0, r = void 0, g = void 0, b = void 0, a = void 0;\n            for (var i = 0; i < n; i++) {\n                offset = i * 4;\n                r = pixels[offset + 0];\n                g = pixels[offset + 1];\n                b = pixels[offset + 2];\n                a = pixels[offset + 3];\n                // Mark ignored color\n                if (!filter(r, g, b, a))\n                    pixels[offset + 3] = 0;\n            }\n        }\n        return Promise.resolve(imageData);\n    };\n    return ImageBase;\n}());\nexports.ImageBase = ImageBase;\n"},"sourceMaps":{"js":{"version":3,"file":"base.js","sourceRoot":"","sources":["../../src/image/base.ts"],"names":[],"mappings":";;;AAEA;IAAA;IA+CA,CAAC;IApCC,6BAAS,GAAT,UAAW,IAAa;QACtB,IAAI,KAAK,GAAW,IAAI,CAAC,QAAQ,EAAE,CAAA;QACnC,IAAI,MAAM,GAAW,IAAI,CAAC,SAAS,EAAE,CAAA;QAErC,IAAI,KAAK,GAAW,CAAC,CAAA;QAErB,IAAI,IAAI,CAAC,YAAY,GAAG,CAAC,EAAE;YACzB,IAAI,OAAO,GAAW,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;YAC7C,IAAI,OAAO,GAAG,IAAI,CAAC,YAAY;gBAAE,KAAK,GAAG,IAAI,CAAC,YAAY,GAAG,OAAO,CAAA;SACrE;aAAM;YACL,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAA;SACzB;QAED,IAAI,KAAK,GAAG,CAAC;YAAE,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,KAAK,EAAE,MAAM,GAAG,KAAK,EAAE,KAAK,CAAC,CAAA;IAClE,CAAC;IAED,+BAAW,GAAX,UAAa,MAAc;QACzB,IAAI,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAA;QAEnC,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;YAChC,IAAI,MAAM,GAAG,SAAS,CAAC,IAAI,CAAA;YAC3B,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAA;YACzB,IAAI,MAAM,SAAA,EAAE,CAAC,SAAA,EAAE,CAAC,SAAA,EAAE,CAAC,SAAA,EAAE,CAAC,SAAA,CAAA;YACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1B,MAAM,GAAG,CAAC,GAAG,CAAC,CAAA;gBACd,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;gBACtB,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;gBACtB,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;gBACtB,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;gBACtB,qBAAqB;gBACrB,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;oBAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;aAChD;SACF;QAED,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;IACnC,CAAC;IACH,gBAAC;AAAD,CAAC,AA/CD,IA+CC;AA/CqB,8BAAS","sourcesContent":["import { Filter, Image, Options, ImageData, ImageSource } from '../typing'\n\nexport abstract class ImageBase implements Image {\n  abstract load(image: ImageSource): Promise<ImageBase>\n  abstract clear(): void\n  abstract update(imageData: ImageData): void\n  abstract getWidth(): number\n  abstract getHeight(): number\n  abstract resize(targetWidth: number, targetHeight: number, ratio: number): void\n  abstract getPixelCount(): number\n  abstract getImageData(): ImageData\n  abstract remove(): void\n\n  scaleDown (opts: Options): void {\n    let width: number = this.getWidth()\n    let height: number = this.getHeight()\n\n    let ratio: number = 1\n\n    if (opts.maxDimension > 0) {\n      let maxSide: number = Math.max(width, height)\n      if (maxSide > opts.maxDimension) ratio = opts.maxDimension / maxSide\n    } else {\n      ratio = 1 / opts.quality\n    }\n\n    if (ratio < 1) this.resize(width * ratio, height * ratio, ratio)\n  }\n\n  applyFilter (filter: Filter): Promise<ImageData> {\n    let imageData = this.getImageData()\n\n    if (typeof filter === 'function') {\n      let pixels = imageData.data\n      let n = pixels.length / 4\n      let offset, r, g, b, a\n      for (let i = 0; i < n; i++) {\n        offset = i * 4\n        r = pixels[offset + 0]\n        g = pixels[offset + 1]\n        b = pixels[offset + 2]\n        a = pixels[offset + 3]\n        // Mark ignored color\n        if (!filter(r, g, b, a)) pixels[offset + 3] = 0\n      }\n    }\n\n    return Promise.resolve(imageData)\n  }\n}\n"]}},"error":null,"hash":"4640af2827fe59eeccf7848217c1e2bb","cacheData":{"env":{}}}