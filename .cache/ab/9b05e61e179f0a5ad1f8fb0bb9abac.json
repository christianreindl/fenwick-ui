{"id":"node_modules/node-vibrant/lib/quantizer/vbox.js","dependencies":[{"name":"/Users/christianreindl/Code/fenwick-ui/node_modules/node-vibrant/lib/quantizer/vbox.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/christianreindl/Code/fenwick-ui/node_modules/node-vibrant/src/quantizer/vbox.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/christianreindl/Code/fenwick-ui/package.json","includedInParent":true,"mtime":1629912362644},{"name":"/Users/christianreindl/Code/fenwick-ui/node_modules/node-vibrant/package.json","includedInParent":true,"mtime":499162500000},{"name":"../util","loc":{"line":3,"column":21},"parent":"/Users/christianreindl/Code/fenwick-ui/node_modules/node-vibrant/lib/quantizer/vbox.js","resolved":"/Users/christianreindl/Code/fenwick-ui/node_modules/node-vibrant/lib/util.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"../util\");\nvar VBox = /** @class */ (function () {\n    function VBox(r1, r2, g1, g2, b1, b2, hist) {\n        this._volume = -1;\n        this._count = -1;\n        this.dimension = { r1: r1, r2: r2, g1: g1, g2: g2, b1: b1, b2: b2 };\n        this.hist = hist;\n    }\n    VBox.build = function (pixels, shouldIgnore) {\n        var hn = 1 << (3 * util_1.SIGBITS);\n        var hist = new Uint32Array(hn);\n        var rmax;\n        var rmin;\n        var gmax;\n        var gmin;\n        var bmax;\n        var bmin;\n        var r;\n        var g;\n        var b;\n        var a;\n        rmax = gmax = bmax = 0;\n        rmin = gmin = bmin = Number.MAX_VALUE;\n        var n = pixels.length / 4;\n        var i = 0;\n        while (i < n) {\n            var offset = i * 4;\n            i++;\n            r = pixels[offset + 0];\n            g = pixels[offset + 1];\n            b = pixels[offset + 2];\n            a = pixels[offset + 3];\n            // Ignored pixels' alpha is marked as 0 in filtering stage\n            if (a === 0)\n                continue;\n            r = r >> util_1.RSHIFT;\n            g = g >> util_1.RSHIFT;\n            b = b >> util_1.RSHIFT;\n            var index = util_1.getColorIndex(r, g, b);\n            hist[index] += 1;\n            if (r > rmax)\n                rmax = r;\n            if (r < rmin)\n                rmin = r;\n            if (g > gmax)\n                gmax = g;\n            if (g < gmin)\n                gmin = g;\n            if (b > bmax)\n                bmax = b;\n            if (b < bmin)\n                bmin = b;\n        }\n        return new VBox(rmin, rmax, gmin, gmax, bmin, bmax, hist);\n    };\n    VBox.prototype.invalidate = function () {\n        this._volume = this._count = -1;\n        this._avg = null;\n    };\n    VBox.prototype.volume = function () {\n        if (this._volume < 0) {\n            var _a = this.dimension, r1 = _a.r1, r2 = _a.r2, g1 = _a.g1, g2 = _a.g2, b1 = _a.b1, b2 = _a.b2;\n            this._volume = (r2 - r1 + 1) * (g2 - g1 + 1) * (b2 - b1 + 1);\n        }\n        return this._volume;\n    };\n    VBox.prototype.count = function () {\n        if (this._count < 0) {\n            var hist = this.hist;\n            var _a = this.dimension, r1 = _a.r1, r2 = _a.r2, g1 = _a.g1, g2 = _a.g2, b1 = _a.b1, b2 = _a.b2;\n            var c = 0;\n            for (var r = r1; r <= r2; r++) {\n                for (var g = g1; g <= g2; g++) {\n                    for (var b = b1; b <= b2; b++) {\n                        var index = util_1.getColorIndex(r, g, b);\n                        c += hist[index];\n                    }\n                }\n            }\n            this._count = c;\n        }\n        return this._count;\n    };\n    VBox.prototype.clone = function () {\n        var hist = this.hist;\n        var _a = this.dimension, r1 = _a.r1, r2 = _a.r2, g1 = _a.g1, g2 = _a.g2, b1 = _a.b1, b2 = _a.b2;\n        return new VBox(r1, r2, g1, g2, b1, b2, hist);\n    };\n    VBox.prototype.avg = function () {\n        if (!this._avg) {\n            var hist = this.hist;\n            var _a = this.dimension, r1 = _a.r1, r2 = _a.r2, g1 = _a.g1, g2 = _a.g2, b1 = _a.b1, b2 = _a.b2;\n            var ntot = 0;\n            var mult = 1 << (8 - util_1.SIGBITS);\n            var rsum = void 0;\n            var gsum = void 0;\n            var bsum = void 0;\n            rsum = gsum = bsum = 0;\n            for (var r = r1; r <= r2; r++) {\n                for (var g = g1; g <= g2; g++) {\n                    for (var b = b1; b <= b2; b++) {\n                        var index = util_1.getColorIndex(r, g, b);\n                        var h = hist[index];\n                        ntot += h;\n                        rsum += (h * (r + 0.5) * mult);\n                        gsum += (h * (g + 0.5) * mult);\n                        bsum += (h * (b + 0.5) * mult);\n                    }\n                }\n            }\n            if (ntot) {\n                this._avg = [\n                    ~~(rsum / ntot),\n                    ~~(gsum / ntot),\n                    ~~(bsum / ntot)\n                ];\n            }\n            else {\n                this._avg = [\n                    ~~(mult * (r1 + r2 + 1) / 2),\n                    ~~(mult * (g1 + g2 + 1) / 2),\n                    ~~(mult * (b1 + b2 + 1) / 2)\n                ];\n            }\n        }\n        return this._avg;\n    };\n    VBox.prototype.contains = function (rgb) {\n        var r = rgb[0], g = rgb[1], b = rgb[2];\n        var _a = this.dimension, r1 = _a.r1, r2 = _a.r2, g1 = _a.g1, g2 = _a.g2, b1 = _a.b1, b2 = _a.b2;\n        r >>= util_1.RSHIFT;\n        g >>= util_1.RSHIFT;\n        b >>= util_1.RSHIFT;\n        return r >= r1 && r <= r2 &&\n            g >= g1 && g <= g2 &&\n            b >= b1 && b <= b2;\n    };\n    VBox.prototype.split = function () {\n        var hist = this.hist;\n        var _a = this.dimension, r1 = _a.r1, r2 = _a.r2, g1 = _a.g1, g2 = _a.g2, b1 = _a.b1, b2 = _a.b2;\n        var count = this.count();\n        if (!count)\n            return [];\n        if (count === 1)\n            return [this.clone()];\n        var rw = r2 - r1 + 1;\n        var gw = g2 - g1 + 1;\n        var bw = b2 - b1 + 1;\n        var maxw = Math.max(rw, gw, bw);\n        var accSum = null;\n        var sum;\n        var total;\n        sum = total = 0;\n        var maxd = null;\n        if (maxw === rw) {\n            maxd = 'r';\n            accSum = new Uint32Array(r2 + 1);\n            for (var r = r1; r <= r2; r++) {\n                sum = 0;\n                for (var g = g1; g <= g2; g++) {\n                    for (var b = b1; b <= b2; b++) {\n                        var index = util_1.getColorIndex(r, g, b);\n                        sum += hist[index];\n                    }\n                }\n                total += sum;\n                accSum[r] = total;\n            }\n        }\n        else if (maxw === gw) {\n            maxd = 'g';\n            accSum = new Uint32Array(g2 + 1);\n            for (var g = g1; g <= g2; g++) {\n                sum = 0;\n                for (var r = r1; r <= r2; r++) {\n                    for (var b = b1; b <= b2; b++) {\n                        var index = util_1.getColorIndex(r, g, b);\n                        sum += hist[index];\n                    }\n                }\n                total += sum;\n                accSum[g] = total;\n            }\n        }\n        else {\n            maxd = 'b';\n            accSum = new Uint32Array(b2 + 1);\n            for (var b = b1; b <= b2; b++) {\n                sum = 0;\n                for (var r = r1; r <= r2; r++) {\n                    for (var g = g1; g <= g2; g++) {\n                        var index = util_1.getColorIndex(r, g, b);\n                        sum += hist[index];\n                    }\n                }\n                total += sum;\n                accSum[b] = total;\n            }\n        }\n        var splitPoint = -1;\n        var reverseSum = new Uint32Array(accSum.length);\n        for (var i = 0; i < accSum.length; i++) {\n            var d = accSum[i];\n            if (splitPoint < 0 && d > total / 2)\n                splitPoint = i;\n            reverseSum[i] = total - d;\n        }\n        var vbox = this;\n        function doCut(d) {\n            var dim1 = d + '1';\n            var dim2 = d + '2';\n            var d1 = vbox.dimension[dim1];\n            var d2 = vbox.dimension[dim2];\n            var vbox1 = vbox.clone();\n            var vbox2 = vbox.clone();\n            var left = splitPoint - d1;\n            var right = d2 - splitPoint;\n            if (left <= right) {\n                d2 = Math.min(d2 - 1, ~~(splitPoint + right / 2));\n                d2 = Math.max(0, d2);\n            }\n            else {\n                d2 = Math.max(d1, ~~(splitPoint - 1 - left / 2));\n                d2 = Math.min(vbox.dimension[dim2], d2);\n            }\n            while (!accSum[d2])\n                d2++;\n            var c2 = reverseSum[d2];\n            while (!c2 && accSum[d2 - 1])\n                c2 = reverseSum[--d2];\n            vbox1.dimension[dim2] = d2;\n            vbox2.dimension[dim1] = d2 + 1;\n            return [vbox1, vbox2];\n        }\n        return doCut(maxd);\n    };\n    return VBox;\n}());\nexports.default = VBox;\n"},"sourceMaps":{"js":{"version":3,"file":"vbox.js","sourceRoot":"","sources":["../../src/quantizer/vbox.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vec3 } from '../color'\nimport { Pixels, Filter } from '../typing'\nimport { getColorIndex, SIGBITS, RSHIFT } from '../util'\n\nexport interface Dimension {\n  r1: number\n  r2: number\n  g1: number\n  g2: number\n  b1: number\n  b2: number\n  [d: string]: number\n}\n\nexport default class VBox {\n  static build (pixels: Pixels, shouldIgnore?: Filter): VBox {\n    let hn = 1 << (3 * SIGBITS)\n    let hist = new Uint32Array(hn)\n    let rmax: number\n    let rmin: number\n    let gmax: number\n    let gmin: number\n    let bmax: number\n    let bmin: number\n    let r: number\n    let g: number\n    let b: number\n    let a: number\n    rmax = gmax = bmax = 0\n    rmin = gmin = bmin = Number.MAX_VALUE\n    let n = pixels.length / 4\n    let i = 0\n\n    while (i < n) {\n      let offset = i * 4\n      i++\n      r = pixels[offset + 0]\n      g = pixels[offset + 1]\n      b = pixels[offset + 2]\n      a = pixels[offset + 3]\n\n      // Ignored pixels' alpha is marked as 0 in filtering stage\n      if (a === 0) continue\n\n      r = r >> RSHIFT\n      g = g >> RSHIFT\n      b = b >> RSHIFT\n\n      let index = getColorIndex(r, g, b)\n      hist[index] += 1\n\n      if (r > rmax) rmax = r\n      if (r < rmin) rmin = r\n      if (g > gmax) gmax = g\n      if (g < gmin) gmin = g\n      if (b > bmax) bmax = b\n      if (b < bmin) bmin = b\n    }\n    return new VBox(rmin, rmax, gmin, gmax, bmin, bmax, hist)\n  }\n\n  dimension: Dimension\n  hist: Uint32Array\n\n  private _volume = -1\n  private _avg: Vec3 | null\n  private _count = -1\n\n  constructor (\n    r1: number, r2: number,\n    g1: number, g2: number,\n    b1: number, b2: number,\n    hist: Uint32Array\n  ) {\n    this.dimension = { r1, r2, g1, g2, b1, b2 }\n\n    this.hist = hist\n  }\n\n  invalidate (): void {\n    this._volume = this._count = -1\n    this._avg = null\n  }\n\n  volume (): number {\n    if (this._volume < 0) {\n      let { r1, r2, g1, g2, b1, b2 } = this.dimension\n      this._volume = (r2 - r1 + 1) * (g2 - g1 + 1) * (b2 - b1 + 1)\n    }\n    return this._volume\n  }\n\n  count (): number {\n    if (this._count < 0) {\n      let { hist } = this\n      let { r1, r2, g1, g2, b1, b2 } = this.dimension\n      let c = 0\n\n      for (let r = r1; r <= r2; r++) {\n        for (let g = g1; g <= g2; g++) {\n          for (let b = b1; b <= b2; b++) {\n            let index = getColorIndex(r, g, b)\n            c += hist[index]\n          }\n        }\n      }\n      this._count = c\n    }\n    return this._count\n  }\n\n  clone (): VBox {\n    let { hist } = this\n    let { r1, r2, g1, g2, b1, b2 } = this.dimension\n    return new VBox(r1, r2, g1, g2, b1, b2, hist)\n  }\n\n  avg (): Vec3 {\n    if (!this._avg) {\n      let { hist } = this\n      let { r1, r2, g1, g2, b1, b2 } = this.dimension\n      let ntot = 0\n      let mult = 1 << (8 - SIGBITS)\n      let rsum: number\n      let gsum: number\n      let bsum: number\n      rsum = gsum = bsum = 0\n\n      for (let r = r1; r <= r2; r++) {\n        for (let g = g1; g <= g2; g++) {\n          for (let b = b1; b <= b2; b++) {\n            var index = getColorIndex(r, g, b)\n            var h = hist[index]\n            ntot += h\n            rsum += (h * (r + 0.5) * mult)\n            gsum += (h * (g + 0.5) * mult)\n            bsum += (h * (b + 0.5) * mult)\n          }\n        }\n      }\n      if (ntot) {\n        this._avg = [\n          ~~(rsum / ntot),\n          ~~(gsum / ntot),\n          ~~(bsum / ntot)\n        ]\n      } else {\n        this._avg = [\n          ~~(mult * (r1 + r2 + 1) / 2),\n          ~~(mult * (g1 + g2 + 1) / 2),\n          ~~(mult * (b1 + b2 + 1) / 2)\n        ]\n      }\n    }\n    return this._avg\n  }\n\n  contains (rgb: Vec3): boolean {\n    let [r, g, b] = rgb\n    let { r1, r2, g1, g2, b1, b2 } = this.dimension\n    r >>= RSHIFT\n    g >>= RSHIFT\n    b >>= RSHIFT\n\n    return r >= r1 && r <= r2 &&\n      g >= g1 && g <= g2 &&\n      b >= b1 && b <= b2\n  }\n\n  split (): VBox[] {\n    let { hist } = this\n    let { r1, r2, g1, g2, b1, b2 } = this.dimension\n    let count = this.count()\n    if (!count) return []\n    if (count === 1) return [this.clone()]\n    let rw = r2 - r1 + 1\n    let gw = g2 - g1 + 1\n    let bw = b2 - b1 + 1\n\n    let maxw = Math.max(rw, gw, bw)\n    let accSum: Uint32Array | null = null\n    let sum: number\n    let total: number\n    sum = total = 0\n\n    let maxd: 'r' | 'g' | 'b' | null = null\n\n    if (maxw === rw) {\n      maxd = 'r'\n      accSum = new Uint32Array(r2 + 1)\n      for (let r = r1; r <= r2; r++) {\n        sum = 0\n        for (let g = g1; g <= g2; g++) {\n          for (let b = b1; b <= b2; b++) {\n            let index = getColorIndex(r, g, b)\n            sum += hist[index]\n          }\n        }\n        total += sum\n        accSum[r] = total\n      }\n    } else if (maxw === gw) {\n      maxd = 'g'\n      accSum = new Uint32Array(g2 + 1)\n      for (let g = g1; g <= g2; g++) {\n        sum = 0\n        for (let r = r1; r <= r2; r++) {\n          for (let b = b1; b <= b2; b++) {\n            let index = getColorIndex(r, g, b)\n            sum += hist[index]\n          }\n        }\n        total += sum\n        accSum[g] = total\n      }\n    } else {\n      maxd = 'b'\n      accSum = new Uint32Array(b2 + 1)\n      for (let b = b1; b <= b2; b++) {\n        sum = 0\n        for (let r = r1; r <= r2; r++) {\n          for (let g = g1; g <= g2; g++) {\n            let index = getColorIndex(r, g, b)\n            sum += hist[index]\n          }\n        }\n        total += sum\n        accSum[b] = total\n      }\n    }\n\n    let splitPoint = -1\n    let reverseSum = new Uint32Array(accSum.length)\n    for (let i = 0; i < accSum.length; i++) {\n      let d = accSum[i]\n      if (splitPoint < 0 && d > total / 2) splitPoint = i\n      reverseSum[i] = total - d\n    }\n\n    let vbox = this\n\n    function doCut (d: string): VBox[] {\n      let dim1 = d + '1'\n      let dim2 = d + '2'\n      let d1 = vbox.dimension[dim1]\n      let d2 = vbox.dimension[dim2]\n      let vbox1 = vbox.clone()\n      let vbox2 = vbox.clone()\n      let left = splitPoint - d1\n      let right = d2 - splitPoint\n      if (left <= right) {\n        d2 = Math.min(d2 - 1, ~~(splitPoint + right / 2))\n        d2 = Math.max(0, d2)\n      } else {\n        d2 = Math.max(d1, ~~(splitPoint - 1 - left / 2))\n        d2 = Math.min(vbox.dimension[dim2], d2)\n      }\n\n      while (!accSum![d2]) d2++\n\n      let c2 = reverseSum[d2]\n      while (!c2 && accSum![d2 - 1]) c2 = reverseSum[--d2]\n\n      vbox1.dimension[dim2] = d2\n      vbox2.dimension[dim1] = d2 + 1\n\n      return [vbox1, vbox2]\n    }\n\n    return doCut(maxd)\n  }\n}\n"]}},"error":null,"hash":"d983ac6f5e762808e594d511748048f5","cacheData":{"env":{}}}